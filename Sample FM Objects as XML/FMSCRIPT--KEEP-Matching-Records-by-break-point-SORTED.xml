<fmxmlsnippet type="FMObjectList">

<Script includeInMenu="False" runFullAccess="False" id="683" name="KEEP Matching Records by break point SORTED ( BreakPointFieldName, BreakPointFieldValue )">
<Step enable="True" id="89" name="comment">
<Text>Description: &#13;&#13;KEEPs the records that match (or do not match - see optional param &apos;OmitMatch&apos;) a specified value when the found set is sorted by the specified field.</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>HISTORY (recent at top): &#13;&#13;2016-08-19-dshockley: additional REQUIRED custom functions that were accidentally left off earlier list. &#13;&#13;2016-05-19-dshockley: added comment indicating required custom functions. &#13;&#13;2016-02-24-dshockley: Fixed a bug where it failed if BreakPointField is not IN this context&apos;s table - GO TO the RECORD, instead of trying GetNthRecord, since GetNthRecord works differently on related fields. BUT, this means the script needs to GO to each record, which is slower, so use the GetNthRecord method if possible.&#13;&#13;2016-02-03-dshockley: the BreakPointFieldValue can now be explicitly null; attempts to get BreakPoint from active field (and its value), but asks user to confirm. &#13;&#13;2015-03-06 (shockley): First created.&#13;</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Parameters:&#13;&#13;&#09;# ( &quot;BreakPointFieldName&quot;; ) &#13;&amp;&#09;# ( &quot;BreakPointFieldValue&quot;; ) &#13;&amp;&#09;# ( &quot;OmitMatch&quot;; ) // default is FALSE - we want to KEEP those that match.&#13;&amp;&#09;# ( &quot;ValueType&quot;; ) // one of: &quot;Text&quot; or &quot;Number&quot; or &quot;Date&quot; or &quot;Time&quot; or &quot;Timestamp&quot; - default is Text</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>REQUIRED CUSTOM FUNCTIONS ( updated 2016-08-19-dshockley ): &#13;#, &#13;#P, &#13;DictContains, &#13;DictEscape, &#13;DictGet, &#13;ValueAsType</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>MUST ALREADY BE SORTED in such a way that the specified &quot;break point&quot; field falls into 2 groups - those matching the specified value and those NOT matching the specified value.</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>This will then be VERY FAST (Order Log2 N), since it does a binary search on each loop iteration.</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>Algorithm:</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Need to find the &quot;First Match&quot; record number for those that match, then find the &quot;Last Match&quot; record number.</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Once those are found, can either omit those before First and omit those after Last (if KEEPING those that match), or Omit Multiple by going to the First and omitting the number between First and Last.</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Declare params</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Get ( ScriptParameter )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$params</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[#P ( "BreakPointFieldName" )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$BreakPointFieldName</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[#P ( "BreakPointFieldValue" )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$BreakPointFieldValue</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[DictContains ( $params; "BreakPointFieldValue" )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$didSetBreakPointFieldValue</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[#P ( "OmitMatch" )  // default is FALSE - we want to KEEP those that match. ]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$OmitMatch</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[#P ( "ValueType" )  // one of: "Text" or "Number" or "Date" or "Time" or "Timestamp" - default is Text]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$ValueType</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Init variables</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( $ValueType )]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA["Text"]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$ValueType</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( $BreakPointFieldValue; $ValueType )  /* Get value as the appropriate type so that comparisons work properly. */]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$BreakPointFieldValue</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( $BreakPointFieldName )]]>
</Calculation>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( Get ( ActiveFieldName ) )]]>
</Calculation>
</Step>
<Step enable="True" id="87" name="Show Custom Dialog">
<Title>
<Calculation>
<![CDATA["Field Needed"]]>
</Calculation>
</Title>
<Message>
<Calculation>
<![CDATA["You need to click into the field you want the script to use when omitting uniques and keeping redundant records."]]>
</Calculation>
</Message>
<Buttons>
<Button CommitState="False">
<Calculation>
<![CDATA["OK"]]>
</Calculation>
</Button>
<Button CommitState="False"></Button>
<Button CommitState="False"></Button>
</Buttons>
</Step>
<Step enable="True" id="103" name="Exit Script"></Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[If ( Position ( Get ( ActiveFieldName ) ; "::" ; 1 ; 1 )
  ; Get ( ActiveFieldName )
  ; Get ( ActiveFieldTableName ) & "::" & Get ( ActiveFieldName )
  )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$BreakPointFieldName</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[GetField ( $BreakPointFieldName )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$BreakPointFieldValue</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[True]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$didSetBreakPointFieldValue</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[MiddleWords ( FieldType ( Get ( FileName ) ; $BreakPointFieldName ) ; 2 ; 1 )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$ValueType</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="87" name="Show Custom Dialog">
<Title>
<Calculation>
<![CDATA["Keep Matching Records Byâ€¦?"]]>
</Calculation>
</Title>
<Message>
<Calculation>
<![CDATA["Keep records where the value in " & Quote ( $BreakPointFieldName ) & " is equal to " & Quote ( $BreakPointFieldValue ) & ", or Omit those that match?"]]>
</Calculation>
</Message>
<Buttons>
<Button CommitState="True">
<Calculation>
<![CDATA["Keep"]]>
</Calculation>
</Button>
<Button CommitState="False">
<Calculation>
<![CDATA["Omit"]]>
</Calculation>
</Button>
<Button CommitState="False">
<Calculation>
<![CDATA["Cancel"]]>
</Calculation>
</Button>
</Buttons>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[Get ( LastMessageChoice ) = 3]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Cancel" ) 
&     # ( "ResultDescription" ; "User canceled when asked to confirm selected field." ) 
&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[Get ( LastMessageChoice ) = 2]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>OmitMatch</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[True]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$OmitMatch</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[Get ( LastMessageChoice ) = 1]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Keep matches, so just continueâ€¦</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>END OF: BreakPointFieldName wasn&apos;t specified by param.</Text>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Error Checking</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( $BreakPointFieldName ) 
 or 
not $didSetBreakPointFieldValue]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Error" ) 
&     # ( "ResultDescription" ; "Not all of the necessary parameters were passed.  Please contact your database administrator and give them the following information:" & "Â¶File: " & Get ( FileName ) & "Â¶Script: " & Get ( ScriptName ) ) 
&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="87" name="Show Custom Dialog">
<Title>
<Calculation>
<![CDATA[DictGet ( $result ; "Result" )]]>
</Calculation>
</Title>
<Message>
<Calculation>
<![CDATA[DictGet ( $result ; "ResultDescription" )]]>
</Calculation>
</Message>
<Buttons>
<Button CommitState="False">
<Calculation>
<![CDATA["OK"]]>
</Calculation>
</Button>
<Button CommitState="False"></Button>
<Button CommitState="False"></Button>
</Buttons>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[Get ( FoundCount ) = 0]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Success" ) 
&     # ( "ResultDescription" ; "The found set was ZERO records, so nothing to do." ) 
&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[not Get ( SortState ) and Get ( FoundCount ) > 1]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Error" ) 
&     # ( "ResultDescription" ; "The found set MUST ALREADY BE SORTED by your specified field '" & $BreakPointFieldName & "'.  Please contact your database administrator and give them the following information:" & "Â¶File: " & Get ( FileName ) & "Â¶Script: " & Get ( ScriptName ) ) 
&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="87" name="Show Custom Dialog">
<Title>
<Calculation>
<![CDATA[DictGet ( $result ; "Result" )]]>
</Calculation>
</Title>
<Message>
<Calculation>
<![CDATA[DictGet ( $result ; "ResultDescription" )]]>
</Calculation>
</Message>
<Buttons>
<Button CommitState="False">
<Calculation>
<![CDATA["OK"]]>
</Calculation>
</Button>
<Button CommitState="False"></Button>
<Button CommitState="False"></Button>
</Buttons>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Setup Environment</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="75" name="Commit Records/Requests">
<NoInteract state="True"></NoInteract>
<Option state="False"></Option>
<ESSForceCommit state="False"></ESSForceCommit>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Left ( $BreakPointFieldName ; Position ( $BreakPointFieldName ; "::"; 1 ; 1 ) - 1 )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$BreakPointTableName</Name>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$BreakPointTableName â‰  Get ( LayoutTableName )]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>2016-02-24-dshockley: If the BreakPointField is NOT in this layout context&apos;s table, we cannot just use GetNthRecord, since that counts by which related record, not the layout&apos;s found records. For these, we have to GO TO the records to see whether to Omit/Keep.</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[True]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$mustGoToRec</Name>
</Step>
<Step enable="True" id="79" name="Freeze Window"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Main script</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$mustGoToRec]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( 
       GetField ( $BreakPointFieldName )
       ; $ValueType 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$valueRecFirst</Name>
</Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Let ( [ 
  oneRecNum = 1
]; 
ValueAsType ( 
       GetNthRecord ( 
               GetField ( $BreakPointFieldName )
               ; oneRecNum
               )
       ; $ValueType 
       )
)]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$valueRecFirst</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Case ( 
       $valueRecFirst < $BreakPointFieldValue
       ; -1
       ; 
       $valueRecFirst > $BreakPointFieldValue
       ; +1
       ;  
       0
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$compareFirst</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$mustGoToRec]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[Get ( FoundCount )]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( 
       GetField ( $BreakPointFieldName )
       ; $ValueType 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$valueRecLast</Name>
</Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Let ( [ 
  oneRecNum = Get ( FoundCount )
]; 
ValueAsType ( 
       GetNthRecord ( 
               GetField ( $BreakPointFieldName )
               ; oneRecNum
               )
       ; $ValueType 
       )
)]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$valueRecLast</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Case ( 
       $valueRecLast < $BreakPointFieldValue
       ; -1
       ; 
       $valueRecLast > $BreakPointFieldValue
       ; +1
       ;  
       0
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$compareLast</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Case ( 
       $compareLast < 0
       ; False
       ; 
       $compareFirst > 0
       ; False
       ; 
       True 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$sortAscending</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[( $compareFirst < 0 and $compareLast < 0 ) 
 or 
( $compareFirst > 0 and $compareLast > 0 )]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>BOTH are Less-than OR greater-than the value we are seeking, so either Omit all or Keep all (if $OmitMatch).</Text>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[not $OmitMatch]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="False"></NoInteract>
<RowPageLocation value="First"></RowPageLocation>
</Step>
<Step enable="True" id="26" name="Omit Multiple Records">
<NoInteract state="True"></NoInteract>
<Calculation>
<![CDATA[Get ( FoundCount )]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Success" ) 
&     # ( "ResultDescription" ; "Every record in the found set was DIFFERENT than the specified value." ) 

&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[$compareFirst = 0 and $compareLast = 0]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>BOTH are the SAME AS the value we are seeking, so either Keep all or Omit all (if $OmitMatch).</Text>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$OmitMatch]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="False"></NoInteract>
<RowPageLocation value="First"></RowPageLocation>
</Step>
<Step enable="True" id="26" name="Omit Multiple Records">
<NoInteract state="True"></NoInteract>
<Calculation>
<![CDATA[Get ( FoundCount )]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Success" ) 
&     # ( "ResultDescription" ; "Every record in the found set was the SAME as the specified value." ) 

&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[$compareFirst = 0]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>First record in found set is SAME, so will only need to find end point.</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchFIRST</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[""  /* not yet known */]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchLAST</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[$compareLast = 0]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Last record in found set is SAME, so will only need to find start point.</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[""  /* not yet known */]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchFIRST</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Get ( FoundCount )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchLAST</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="89" name="comment">
<Text>neither is SAME and they bracket the specified value on either side, so need to find both start and end point.</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[""  /* not yet known */]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchFIRST</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[""  /* not yet known */]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchLAST</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( $recNum_MatchFIRST )]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Need to find first record that matches:</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceStart</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[If ( not IsEmpty ( $recNum_MatchLAST )
       ; $recNum_MatchLAST
       ; Get ( FoundCount ) 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceEnd</Name>
</Step>
<Step enable="True" id="71" name="Loop"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnSearchSpaceStart 
 + 
Floor ( 
       ( $rnSearchSpaceEnd - $rnSearchSpaceStart ) 
       / 2 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnTesting</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$mustGoToRec]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[$rnTesting]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( 
       GetField ( $BreakPointFieldName )
       ; $ValueType 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Let ( [ 
  oneRecNum = $rnTesting
]; 
ValueAsType ( 
       GetNthRecord ( 
               GetField ( $BreakPointFieldName )
               ; oneRecNum
               )
       ; $ValueType 
       )
)]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$thisValue = $BreakPointFieldValue]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Matches, so need to look earlier, since being IN the value means the first record is always earlier.</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>BUT, this could be the first itself, since it matches.</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnTesting]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceEnd</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[( $thisValue < $BreakPointFieldValue and $sortAscending ) 
 or 
( $thisValue > $BreakPointFieldValue and not $sortAscending )]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>BEFORE the matching-values-block, because:</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>&#09;This is LESS THAN the specified value (and sort is ascending), OR:</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>&#09;This is GREATER THAN the specified value (and sort is NOT ascending).</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Move search space to start one record after this one:</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnTesting + 1]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceStart</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="125" name="Else If">
<Calculation>
<![CDATA[( $thisValue > $BreakPointFieldValue and $sortAscending ) 
 or 
( $thisValue < $BreakPointFieldValue and not $sortAscending )]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>AFTER the matching-values-block, because:</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>&#09;This is GREATER THAN the specified value (and sort is ascending), OR:</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>&#09;This is LESS THAN the specified value (and sort is NOT ascending).</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Move search space to start one record after this one:</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnTesting - 1]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceEnd</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="False" id="125" name="Else If">
<Calculation>
<![CDATA[$rnSearchSpaceEnd â‰¤ $rnSearchSpaceStart]]>
</Calculation>
</Step>
<Step enable="False" id="89" name="comment">
<Text>don&apos;t move.</Text>
</Step>
<Step enable="False" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$rnSearchSpaceEnd â‰¤ $rnSearchSpaceStart]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>SAME record, so we&apos;ve found the break point (matching side of the split - if ANY match at all).</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnSearchSpaceStart]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchFIRST</Name>
</Step>
<Step enable="True" id="72" name="Exit Loop If">
<Calculation>
<![CDATA[True]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="73" name="End Loop"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$mustGoToRec]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[$recNum_MatchFIRST]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( 
       GetField ( $BreakPointFieldName )
       ; $ValueType 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Let ( [ 
  oneRecNum = $recNum_MatchFIRST
]; 
ValueAsType ( 
       GetNthRecord ( 
               GetField ( $BreakPointFieldName )
               ; oneRecNum
               )
       ; $ValueType 
       )
)]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$thisValue â‰  $BreakPointFieldValue]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Could NOT find the start of the matching-records-block, so there are not any. All are DIFFERENT, then:</Text>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[not $OmitMatch]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="False"></NoInteract>
<RowPageLocation value="First"></RowPageLocation>
</Step>
<Step enable="True" id="26" name="Omit Multiple Records">
<NoInteract state="True"></NoInteract>
<Calculation>
<![CDATA[Get ( FoundCount )]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[      # ( "Result" ; "Success" ) 
&     # ( "ResultDescription" ; "Every record in the found set was DIFFERENT than the specified value." ) 

&     # ( "FileName" ; Get ( FileName ) ) 
&     # ( "ScriptName" ; Get ( ScriptName ) ) 
&     # ( "ExecutionTimestamp" ; Get ( CurrentTimestamp ) )
&     # ( "ExecutionAccount" ; Get ( AccountName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( $recNum_MatchLAST )]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Need to find the LAST record that matches:</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>This loop is much easier, since we now only need to find the END point of the matching-records-block. We found the start already (and there was one).</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$recNum_MatchFIRST]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceStart</Name>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Get ( FoundCount )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceEnd</Name>
</Step>
<Step enable="True" id="71" name="Loop"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnSearchSpaceStart + Ceiling ( 
       ( $rnSearchSpaceEnd - $rnSearchSpaceStart ) 
       / 2 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnTesting</Name>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$mustGoToRec]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[$rnTesting]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( 
       GetField ( $BreakPointFieldName )
       ; $ValueType 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Let ( [ 
  oneRecNum = $rnTesting
]; 
ValueAsType ( 
       GetNthRecord ( 
               GetField ( $BreakPointFieldName )
               ; oneRecNum
               )
       ; $ValueType 
       )
)]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>DISABLED: &#13;$rnTesting = $rnSearchSpaceEnd &#13; or &#13;$rnTesting = $rnSearchSpaceStart&#13;&#13;Hit an end point, so we are done looking.</Text>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$thisValue = $BreakPointFieldValue]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Matches, so need to look AFTER, since being IN the value means the last record is always earlier.</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>BUT, this could be the Last itself, since it matches.</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnTesting]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceStart</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnTesting - 1]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$rnSearchSpaceEnd</Name>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$rnSearchSpaceEnd â‰¤ $rnSearchSpaceStart]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>SAME record, so we&apos;ve found the break point (matching side of the split).</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[$rnSearchSpaceEnd]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$recNum_MatchLAST</Name>
</Step>
<Step enable="True" id="72" name="Exit Loop If">
<Calculation>
<![CDATA[True]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="73" name="End Loop"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$OmitMatch]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>OMIT those that match, so omit multiple from first to last:</Text>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[$recNum_MatchFIRST]]>
</Calculation>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$mustGoToRec]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( 
       GetField ( $BreakPointFieldName )
       ; $ValueType 
       )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[Let ( [ 
  oneRecNum = Get ( RecordNumber )
]; 
ValueAsType ( 
       GetNthRecord ( 
               GetField ( $BreakPointFieldName )
               ; oneRecNum
               )
       ; $ValueType 
       )
)]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$thisValue = $BreakPointFieldValue]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Just in case, check whether we actually found the specified value AT ALL, before we omit:</Text>
</Step>
<Step enable="True" id="26" name="Omit Multiple Records">
<NoInteract state="True"></NoInteract>
<Calculation>
<![CDATA[$recNum_MatchLAST - $recNum_MatchFIRST + 1]]>
</Calculation>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="69" name="Else"></Step>
<Step enable="True" id="89" name="comment">
<Text>KEEP those that match, so omit multiple AFTER, then BEFORE (don&apos;t do the earlier group omit first, since that would move the remaining record numbers):</Text>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="True"></NoInteract>
<RowPageLocation value="ByCalculation"></RowPageLocation>
<Calculation>
<![CDATA[$recNum_MatchLAST + 1]]>
</Calculation>
</Step>
<Step enable="True" id="26" name="Omit Multiple Records">
<NoInteract state="True"></NoInteract>
<Calculation>
<![CDATA[Get ( FoundCount ) - $recNum_MatchLAST]]>
</Calculation>
</Step>
<Step enable="True" id="16" name="Go to Record/Request/Page">
<NoInteract state="False"></NoInteract>
<RowPageLocation value="First"></RowPageLocation>
</Step>
<Step enable="True" id="26" name="Omit Multiple Records">
<NoInteract state="True"></NoInteract>
<Calculation>
<![CDATA[$recNum_MatchFIRST - 1]]>
</Calculation>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[Get ( FoundCount ) = 1]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>If there were NONE that matched in the found set, we will have one left to omit:</Text>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[ValueAsType ( GetField ( $BreakPointFieldName ); $ValueType )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$thisValue</Name>
</Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[$thisValue â‰  $BreakPointFieldValue]]>
</Calculation>
</Step>
<Step enable="True" id="25" name="Omit Record"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Cleanup</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[IsEmpty ( $result )]]>
</Calculation>
</Step>
<Step enable="True" id="141" name="Set Variable">
<Value>
<Calculation>
<![CDATA[  # ( "Result" ; "Success" )
&      # ( "ResultDescription" ; "" )
&      # ( "FileName" ; Get ( FileName ) )
&      # ( "ScriptName" ; Get ( ScriptName ) )]]>
</Calculation>
</Value>
<Repetition>
<Calculation>
<![CDATA[1]]>
</Calculation>
</Repetition>
<Name>$result</Name>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="103" name="Exit Script">
<Calculation>
<![CDATA[$result]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment">
<Text>----------------------------------------</Text>
</Step>
<Step enable="True" id="89" name="comment">
<Text>Debugging</Text>
</Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="68" name="If">
<Calculation>
<![CDATA[False      // DEBUGGING]]>
</Calculation>
</Step>
<Step enable="True" id="89" name="comment">
<Text>This is here for debugging - while in Script Debugger, you can skip down here to access this subscript, then go back to where the script was running.</Text>
</Step>
<Step enable="True" id="1" name="Perform Script">
<Script id="475" name="DEBUGGING_SCRIPT"></Script>
</Step>
<Step enable="True" id="70" name="End If"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
<Step enable="True" id="89" name="comment"></Step>
</Script>

</fmxmlsnippet>